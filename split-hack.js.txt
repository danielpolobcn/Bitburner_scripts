// TARGET SERVER MUST BE ENTERED AS AN ARGUMENT, i.e. "run split-hack. n00dles".
const target = ns.args[0];

// Hack will be attempted if current security in the server is less than 10 points above its maximum level.
const MaxSecurity = ns.getServerMinSecurityLevel(target) + 8;
// Hack will be attempted if current money in the server is 70% of maximum money.
const MinMoney = ns.getServerMaxMoney(target) * 0.7;
// RAM consumed by weakener.js , grower.js , hacker.js
const RamPerThread = 1.75;

// Copy hacking scripts to the executing server.
const executor = ns.getHostname();
const files = ["weakener.js", "grower.js", "hacker.js"];
ns.scp(files, executor, "home");
ns.tprint("Hacking scripts copied to " , executor);
await ns.sleep(500);

// Execute the infinite loop. To prevent errors at game startup, any hacking script running on the executing server must be killed.
const RamAvailable = ns.getServerMaxRam(executor) - ns.getScriptRam("split-hack.js");
var threads = 1;
var sleeptime = 1000;
while (true) {
    if (ns.scriptRunning("weakener.js" , executor) == true) {
    ns.kill("weakener.js" , executor , threads , target);
    }
    if (ns.scriptRunning("grower.js" , executor) == true) {
    ns.kill("grower.js" , executor , threads , target);
    }
    if (ns.scriptRunning("hacker.js" , executor) == true) {
    ns.kill("hacker.js" , executor , threads , target);
    }
    if (ns.getServerSecurityLevel(target) > MaxSecurity) {
    sleeptime = ns.getWeakenTime(target);
    threads = Math.floor(RamAvailable / RamPerThread);
    ns.exec("weakener.js", executor , threads , target);
    }
    else if (ns.getServerMoneyAvailable(target) < MinMoney) {
    sleeptime = ns.getGrowTime(target);
    threads = Math.floor(RamAvailable / RamPerThread);
    ns.exec("grower.js", executor , threads , target);
    }
    else {
    sleeptime = ns.getHackTime(target);
    threads = Math.floor(RamAvailable / RamPerThread);
    ns.exec("hacker.js", executor , threads , target);
    }
    await ns.sleep(sleeptime + 1000);
}
/** @param {NS} ns */
export async function main(ns) {

// Find our current ability to open ports on servers.
let PortsOpeningAbility = 0;
if (ns.fileExists("BruteSSH.exe")) {
    PortsOpeningAbility++;
}
if (ns.fileExists("FTPCrack.exe")) {
    PortsOpeningAbility++;
}
if (ns.fileExists("RelaySMTP.exe")) {
    PortsOpeningAbility++;
}
if (ns.fileExists("HTTPWorm.exe")) {
    PortsOpeningAbility++;
}
if (ns.fileExists("SQLInject.exe")) {
    PortsOpeningAbility++;
}
ns.tprint("Currently able to open ", PortsOpeningAbility, " ports in target servers.");

// Create an array with all the servers in the game for which we have enough ability to open their ports.
let Servers = [];
let serversfound = ns.scan("home");
while (serversfound.length > 0) {
    let server = serversfound.shift();
    if (!Servers.includes(server) && server !== "home" && ns.getServerNumPortsRequired(server) <= PortsOpeningAbility) {
        Servers.push(server);
        serversfound = serversfound.concat(ns.scan(server));
    }
}

// Make a list with all the servers to be cracked within our current ability, not formerly cracked.
const HackingAbility = ns.getHackingLevel();
let NewCrackedServers = [];
for (let i in Servers) {
    if (ns.hasRootAccess(Servers[i]) == false && ns.getServerRequiredHackingLevel(Servers[i]) <= HackingAbility) {
        NewCrackedServers.push(Servers[i]);
    }
}
ns.tprint("New servers to be cracked: ", NewCrackedServers);

// Crack through the list of new servers.
for (let j in NewCrackedServers) {
    ns.exec("cracker.js", "home", 1, NewCrackedServers[j]);
}

// Self-hack through the list of new servers when possible.
const RamPerThread = ns.getScriptRam("basic-hack.js");
await ns.sleep(2000);
for (let k in NewCrackedServers) {
    if (ns.getServerMaxRam(NewCrackedServers[k]) >= 32 && ns.getServerMaxMoney(NewCrackedServers[k]) > 0) {
		ns.scp ("split-hack.js" , NewCrackedServers[k]);
		ns.exec("split-hack.js" , NewCrackedServers[k] , 1 , NewCrackedServers[k]);
		ns.tprint(NewCrackedServers[k] , " is self-hacking");
	}
	if (ns.getServerMaxRam(NewCrackedServers[k]) != 0 && ns.getServerMaxRam(NewCrackedServers[k]) < 32 && ns.getServerMaxMoney(NewCrackedServers[k]) > 0) { 
        const RamPerThread = ns.getScriptRam("basic-hack.js");
		ns.scp("basic-hack.js" , NewCrackedServers[k]);
        let threads = Math.floor(ns.getServerMaxRam(NewCrackedServers[k]) / RamPerThread);
        ns.exec("basic-hack.js" , NewCrackedServers[k] , threads , NewCrackedServers[k]);
        ns.tprint(NewCrackedServers[k] , " is self-hacking");
    }
	if (ns.getServerMaxRam(NewCrackedServers[k]) != 0 && ns.getServerMaxMoney(NewCrackedServers[k]) == 0) {
		ns.tprint(NewCrackedServers[k] , " needs a different target to be assigned for hacking");
	}
    if (ns.getServerMaxRam(NewCrackedServers[k]) == 0) {
        ns.tprint(NewCrackedServers[k] , " has no RAM");
    }
}
ns.tprint("End of script");

}
// List all the servers with 0 ports to open connected to "home" and then those connected to the first batch of servers found.
var serversTotal = [];
var servers = scan("home");
for (i in servers) {
	if (getServerNumPortsRequired(servers[i]) == 0){
		serversTotal.push(servers[i]);
	}
	var serversfound = scan(servers[i]);
	if (serversfound.length >= 2) {
		serversfound.shift();
		for (j in serversfound) {
			serversfound[j].toString();
			if (getServerNumPortsRequired(serversfound[j]) == 0){
				serversTotal.push(serversfound[j]);
			}
		}
	}
}
tprint ("Total servers with 0 ports = " , serversTotal.length);

// Choose the server with the most money as target.
var serversMoney = [];
var serversRich = [];
for (i in serversTotal) {
	var MaxMoney = getServerMaxMoney(serversTotal[i]);
	serversMoney.push(MaxMoney);
	serversRich.push(serversTotal[i]);
}
var Max = Math.max.apply(null, serversMoney);
var position = serversMoney.indexOf(Max);
var target = serversRich[position];
tprint ("Target server = " , target);

// Crack and self-hack the target server.
var ramPerThread = getScriptRam("basic-hack.script");
scp("basic-hack.script" , target);
nuke(target);
var ramAvailable = getServerMaxRam(target);
var threads = Math.floor(ramAvailable / ramPerThread);
exec("basic-hack.script" , target , threads, target);

// Remove the target server from the array of servers found.
for (var i = 0; i < serversTotal.length; i++){ 
    if (serversTotal[i] === target){ 
        serversTotal.splice(i, 1);
		i--; 
    }
}

// Launch the hacking script against the target server in all the servers found, with as many threads as allowed by their RAM.
for (j in serversTotal){
	sleep (1000);
	scp("basic-hack.script" , serversTotal[j]);
	nuke(serversTotal[j]);
	var ramAvailable = getServerMaxRam(serversTotal[j]);
	var threads = Math.floor(ramAvailable / ramPerThread);
	exec("basic-hack.script" , serversTotal[j] , threads, target);
}